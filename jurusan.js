"use strict"

class Jurusan {
    constructor(){
        // Compile the data
        this.compileData()
    }
    
    /**
     * Compiles the program data into several aliases
     */
    compileData(){
        var i;
        for (i = 0; i < Object.keys(this.data).length; i++){
            var j;
            var key = Object.keys(this.data)[i];
            var value = this.data[key];
            value.key = key;
            
            // Skip if this has been generated during compile-time
            if (value.autogenerated) continue;
            
            // Iterate over inherited properties to assign this node as their "children"
            if (value.inherits) for (j = 0; j < value.inherits.length; j++){
                if (!this.data[value.inherits[j]]){
                    console.warn("Property \"" + value.inherits[j] + "\" is not found. This is likely a problem with Jurusan.js, please report to https://github.com/himtibinus/jurusan.js/issues/new/.");
                    continue;
                }
                if (!this.data[value.inherits[j]].children) this.data[value.inherits[j]].children = [];
                this.data[value.inherits[j]].children.push(key);
            }
            
            // Create aliases based on individual terms and initials
            if (value.name){
                var words = value.name.toLowerCase().split(" ");
                var slug = "";
                var initials = "";
                for (j = 0; j < words.length; j++){
                    if (j > 0) slug += "_";
                    slug += words[j];
                    switch (words[j]){
                        // Skip these words
                        case "and":
                        case "dan":
                        case "of":
                            if (value.compilerOptions && value.compilerOptions.includeConjunctions) initials += words[j].charAt(0);
                            break;
                        default: initials += words[j].charAt(0);
                    }
                    
                    // Create reference for each slug, if we haven't reach the last word yet (to prevent recursion)
                    if (j < words.length - 1){
                        if (!this.data[slug]) this.data[slug] = {key: slug};
                        if (!this.data[slug].didYouMean) this.data[slug].didYouMean = [];
                        this.data[slug].didYouMean.push(key);
                        this.data[slug].autogenerated = true;
                    }
                    
                    // Create reference for each initials
                    if (!this.data[initials]) this.data[initials] = {key: initials};
                    if (!this.data[initials].didYouMean) this.data[initials].didYouMean = [];
                    this.data[initials].didYouMean.push(key);
                    this.data[initials].autogenerated = true;
                };
            }
        }
    }
    
    /**
     * Searches for a list (array) of study programs (majors) based on the keyword.
     * 
     * @param keyword The search keyword
     * @returns Search results
     */
    search(keyword, {
        limit = 10,
        onlyExact = false,
        verbose = false,
        init = true
    }){
        // Make sure that the search keyword is a string
        if (typeof keyword !== "string") throw new Exception();
         
        var i, j;
        var res = [];
        var originalLimit = limit;
        
        // Reset searched state
        for (i = 0; i < this.data.length; i++) this.data[i].searched = false;
        
        // Check if there is an exact match
        var terms = keyword.toLowerCase().split(" ").join("_");
        
        if (this.data[terms]){
            // Check for exact match
            if (this.data[terms].type == "Program" && limit > 0){
                if (verbose) console.log("Exact Match: " + this.data[terms].name);
                res.push(this.data[terms]);
        
                limit--;
            }
            
            // Check children entries
            if (this.data[terms].children) for (i = 0; i < this.data[terms].children.length && limit > 0; i++){
                if (verbose) console.log("Found children: " + this.data[terms].children[i]);
                var subres = this.search(this.data[terms].children[i], { limit: limit, onlyExact: true, init: false });
                limit -= subres.length;
                res = res.concat(subres);
            }
            
            // Check aliases ("Did you mean __?") entries
            if (this.data[terms].didYouMean) for (i = 0; i < this.data[terms].didYouMean.length && limit > 0; i++){
                if (verbose) console.log("Did you mean: " + this.data[terms].didYouMean[i]);
                var subres = this.search(this.data[terms].didYouMean[i], { limit: limit, onlyExact: true, init: false });
                limit -= subres.length;
                res = res.concat(subres);
            }
            
            // Check "see also" entries
            if (this.data[terms].seeAlso) for (i = 0; i < this.data[terms].seeAlso.length && limit > 0; i++){
                if (verbose) console.log("See also: " + this.data[terms].seeAlso[i]);
                var subres = this.search(this.data[terms].seeAlso[i], { limit: limit, onlyExact: true, init: false });
                limit -= subres.length;
                res = res.concat(subres);
            }
        }
        
        
        if (!onlyExact){
            // Create a copy of terms
            var temp = terms;
            var split = terms.split("_");
            
            if (verbose) console.log("Attempting to search for:");
            
            // Recurse
            for (i = 0; i < split.length - 1 && limit > 0; i++){
                // Remove the last word on temp
                temp = temp.slice(0, -(1 + split[i+1].length));
                
                if (verbose) console.log("+ " + temp);
                
                // Perform an exact search
                var subres = this.search(temp, { limit: limit, onlyExact: true, init: false });
                limit -= subres.length;
                res = res.concat(subres);
            }
            
            // Search by initials
            if (split.length == 1){
                temp = keyword;
                
                var tempLength = temp.length;
                
                for (i = 0; i < tempLength - 1; i++){
                    // Remove the last character on temp
                    temp = temp.slice(0, -1);
                    
                    if (verbose) console.log("+ " + temp);
                    
                    // Perform an exact search
                    var subres = this.search(temp, { limit: limit, onlyExact: true, init: false });
                    limit -= subres.length;
                    res = res.concat(subres);
                }
            }
        }
        
        // Rearrange the confidence level
        if (init){
            var confidence = {};
            for (i = 0; i < res.length; i++){
                if (!confidence[res[i].key]) confidence[res[i].key] = 0;
                confidence[res[i].key]++;
            }
            
            // Sort by highest confidence
            var uniqueResults = Object.keys(confidence);
            
            uniqueResults.sort(function(a, b){
                return confidence[b] - confidence[a];
            })
            
            // Recreate res by putting the confidence level
            res = [];
            for (i = 0; i < uniqueResults.length && i < originalLimit; i++){
                res.push(this.data[uniqueResults[i]]);
                res[i].confidence = confidence[uniqueResults[i]];
            }
        }
        return res;
    }
    
    /**
     * Mencari daftar program studi (jurusan) berdasarkan kata kunci yang diberikan.
     * 
     * @param jurusan Kata kunci yang hendak dicari
     * @returns Hasil pencarian
     */
    cari(jurusan, opsi){
        if (!opsi) opsi = {};
        return this.search(jurusan, opsi);
    }
    
    // Actual data
    data = {
        anggrek: {
            name: "Anggrek",
            type: "Campus",
            location: ""
        },
        alam_sutera: {
            name: "Alam Sutera",
            type: "Campus",
            campuses: ["Alam Sutera"],
            location: "Jl. Jalur Sutera Barat Kav. 21, Alam Sutera, Tangerang, Banten"
        },
        binus_aso_school_of_engineering: {
            name: "BINUS ASO School of Engineering",
            type: "Campus",
            campuses: ["BASE"],
            location: ""
        },
        binus_business_school: {
            name: "BINUS Business School",
            type: "Faculty",
            inherits: ["regular"]
        },
        business: {
            didYouMean: ["binus_business_school", "economics"]
        },
        communication: {
            name: "Communication",
            type: "Subfaculty",
            inherits: ["faculty_of_economics_and_communication"]
        },
        communication_and_economics: {
            didYouMean: ["faculty_of_economics_and_communication"]
        },
        computer_science: {
            name: "Computer Science",
            type: "Program Family",
            inherits: ["school_of_computer_science", "alam_sutera", "kemanggisan"]
        },
        computer_science_and_mathematics: {
            didYouMean: ["mathematics_and_computer_science"]
        },
        computer_science_and_statistics: {
            didYouMean: ["statistics_and_computer_science"]
        },
        computer_science_global_class: {
            name: "Computer Science (Global Class)",
            type: "Program",
            inherits: ["computer_science", "global_class"]
        },
        computer_science_master_track: {
            name: "Computer Science (Master Track)",
            type: "Program",
            inherits: ["computer_science", "master_track"]
        },
        computer_science_regular: {
            name: "Computer Science (Regular)",
            type: "Program",
            inherits: ["computer_science", "regular"]
        },
        csi: {
            didYouMean: ["cyber_security"]
        },
        cyber_security: {
            name: "Cyber Security",
            type: "Program",
            inherits: ["school_of_computer_science", "regular", "kemanggisan"]
        },
        cysec: {
            didYouMean: ["cyber_security"]
        },
        economics: {
            name: "Economics",
            type: "Subfaculty",
            inherits: ["faculty_of_economics_and_communication"]
        },
        faculty_of_economics_and_communication: {
            name: "Faculty of Economics and Communication",
            type: "Faculty",
            inherits: ["undergraduate_program"]
        },
        faculty_of_engineering: {
            name: "Faculty of Engineering",
            type: "Faculty",
            inherits: ["undergraduate_program"]
        },
        game_application_and_technology: {
            name: "Game Application and Technology",
            type: "Program",
            inherits: ["school_of_computer_science", "regular", "kemanggisan"]
        },
        global_class: {
            name: "Global Class",
            type: "Program Type"
        },
        humanities: {
            name: "Faculty of Humanities",
            type: "Faculty",
            inherits: ["undergraduate_program"]
        },
        kemanggisan: {
            name: "Kemanggisan",
            type: "Campus",
            inherits: ["anggrek", "kijang", "syahdan"],
            campuses: ["Kemanggisan"]
        },
        kijang: {
            name: "Kijang",
            type: "Campus",
            location: ""
        },
        master_program: {
            name: "Master Program",
            type: "Program Level",
            programLevel: 2
        },
        master_track: {
            name: "Master Track",
            type: "Program Type",
            inherits: ["undergraduate_program", "master_program"],
        },
        mat: {
            didYouMean: ["mathematics_and_computer_science"]
        },
        mathematics_and_computer_science: {
            name: "Mathematics and Computer Science",
            type: "Program",
            inherits: ["computer_science", "regular"]
        },
        mobile_application_and_technology: {
            name: "Mobile Application and Technology",
            type: "Program",
            inherits: ["school_of_computer_science", "regular", "kemanggisan"]
        },
        regular: {
            name: "Regular Programme",
            type: "Program Type"
        },
        s1: {
            didYouMean: ["undergraduate_program"]
        },
        s2: {
            didYouMean: ["master_program"]
        },
        school_of_information_systems: {
            name: "School of Information Systems",
            type: "Faculty",
            inherits: ["undergraduate_program"]
        },
        school_of_computer_science: {
            name: "School of Computer Science",
            type: "Faculty",
            inherits: ["undergraduate_program"],
            compilerOptions: {
                includeConjunctions: true
            }
        },
        school_of_design: {
            name: "School of Design",
            type: "Faculty",
            inherits: ["undergraduate_program"],
            compilerOptions: {
                includeConjunctions: true
            }
        },
        sois: {
            didYouMean: "school_of_information_systems"
        },
        statistics_and_computer_science: {
            name: "Statistics and Computer Science",
            type: "Program",
            inherits: ["computer_science", "regular"]
        },
        syahdan: {
            name: "Syahdan",
            type: "Campus",
            location: ""
        },
        teknik_informatika: {
            didYouMean: ["computer_science"]
        },
        ti_mat: {
            didYouMean: ["mathematics_and_computer_science"]
        },
        ti_stat: {
            didYouMean: ["statistics_and_computer_science"]
        },
        undergraduate_program: {
            name: "Undergraduate Program",
            type: "Program Level",
            programLevel: 1
        }
    };
}

console.log(new Jurusan().search("matematika aku tembak", {verbose: true}));
